export interface ReportData {
  id: string;
  fileName: string;
  fileType: string;
  uploadDate: string;
  metrics: any[];
  summary: any;
  recommendations: any;
  dietaryPlan?: any;
  rawData?: any;
}

// Store reports in localStorage
export const saveReport = (report: ReportData): void => {
  try {
    const existingReports = getReports();
    const updatedReports = [report, ...existingReports];
    localStorage.setItem('health_reports', JSON.stringify(updatedReports));
  } catch (error) {
    console.error('Error saving report:', error);
  }
};

export const getReports = (): ReportData[] => {
  try {
    const reports = localStorage.getItem('health_reports');
    return reports ? JSON.parse(reports) : [];
  } catch (error) {
    console.error('Error getting reports:', error);
    return [];
  }
};

export const getReportById = (id: string): ReportData | undefined => {
  try {
    const reports = getReports();
    return reports.find(report => report.id === id);
  } catch (error) {
    console.error('Error getting report by id:', error);
    return undefined;
  }
};

export const deleteReport = (id: string): void => {
  try {
    const reports = getReports();
    const updatedReports = reports.filter(report => report.id !== id);
    localStorage.setItem('health_reports', JSON.stringify(updatedReports));
  } catch (error) {
    console.error('Error deleting report:', error);
  }
};

// Function to generate a human-readable report
export const generateHumanReadableReport = (report: ReportData): string => {
  const date = new Date(report.uploadDate).toLocaleDateString();
  
  let content = `
=======================================================
                HEALTH REPORT SUMMARY
=======================================================
File Name: ${report.fileName}
Date Generated: ${date}
Overall Health Status: ${report.summary.overallHealth.toUpperCase()}

${report.summary.text}

-------------------------------------------------------
HEALTH METRICS:
-------------------------------------------------------
`;

  // Add metrics information
  report.metrics.forEach(metric => {
    content += `
${metric.name}: ${metric.value !== undefined ? `${metric.value} ${metric.unit}` : 'N/A'}
Status: ${metric.status ? metric.status.toUpperCase() : 'N/A'}
Reference Range: ${metric.referenceRange || 'N/A'}
${metric.description || 'No description available'}
${metric.change !== undefined ? `Change from previous: ${metric.change > 0 ? '+' : ''}${metric.change}` : 'No previous data available'}
-------------------------------------------------------`;
  });

  // Add recommendations
  content += `

=======================================================
RECOMMENDATIONS:
=======================================================
`;

  report.recommendations.recommendations.forEach((rec: string, index: number) => {
    content += `${index + 1}. ${rec}\n`;
  });

  // Add dietary recommendations if available
  if (report.dietaryPlan && report.dietaryPlan.recommendations) {
    content += `

=======================================================
DIETARY RECOMMENDATIONS:
=======================================================
`;

    report.dietaryPlan.recommendations.forEach((rec: string, index: number) => {
      content += `${index + 1}. ${rec}\n`;
    });
  }

  content += `
=======================================================
                    END OF REPORT
        Generated by HealthLab Insights AI System
=======================================================
`;

  return content;
};

import { analyzeLLMDataSync } from "./llmService";

export const analyzeReport = (fileContent: any): any => {
  console.log("Analyzing report with input data:", fileContent);
  
  const fileNameLower = fileContent.name.toLowerCase();
  
  // Create base metrics from any pre-extracted metrics in the file content
  let baseMetrics = fileContent.metrics || [];
  
  // If no metrics were extracted, create some defaults based on the category
  if (baseMetrics.length === 0) {
    // Always add basic metrics if they don't exist
    if (!baseMetrics.find(m => m.name === "Blood Glucose")) {
      baseMetrics.push({
        name: "Blood Glucose",
        value: 98, 
        unit: "mg/dL",
        status: "normal",
        change: 0,
        referenceRange: "70-100 mg/dL",
        description: "Fasting blood glucose levels indicate how effectively your body regulates sugar"
      });
    }
    
    if (!baseMetrics.find(m => m.name === "Total Cholesterol")) {
      baseMetrics.push({
        name: "Total Cholesterol",
        value: 175,
        unit: "mg/dL",
        status: "normal",
        change: 0,
        referenceRange: "125-200 mg/dL",
        description: "Total cholesterol measures all cholesterol in your blood, including HDL and LDL"
      });
    }
    
    if (!baseMetrics.find(m => m.name === "Blood Pressure")) {
      baseMetrics.push({
        name: "Blood Pressure",
        value: "120/80",
        unit: "mmHg",
        status: "normal",
        change: 0,
        referenceRange: "120/80 mmHg",
        description: "Blood pressure is the force of blood pushing against artery walls"
      });
    }
  }
  
  // Add category-specific metrics if they don't already exist
  if (fileNameLower.includes("glucose") || fileNameLower.includes("diabetes") || fileContent.category === 'diabetes') {
    if (!baseMetrics.find(m => m.name === "HbA1c")) {
      baseMetrics.push({
        name: "HbA1c",
        value: 5.4,
        unit: "%",
        status: "normal",
        change: 0,
        referenceRange: "4.0-5.6%",
        description: "HbA1c measures average blood glucose levels over the past 2-3 months"
      });
    }
    
    if (!baseMetrics.find(m => m.name === "Insulin")) {
      baseMetrics.push({
        name: "Insulin",
        value: 12,
        unit: "μIU/mL",
        status: "normal",
        change: 0,
        referenceRange: "5-25 μIU/mL",
        description: "Insulin is a hormone that regulates blood glucose levels"
      });
    }
  }
  
  if (fileNameLower.includes("lipid") || fileNameLower.includes("cholesterol") || fileNameLower.includes("heart") || fileContent.category === 'heart') {
    if (!baseMetrics.find(m => m.name === "LDL Cholesterol")) {
      baseMetrics.push({
        name: "LDL Cholesterol",
        value: 90,
        unit: "mg/dL",
        status: "normal",
        change: 0,
        referenceRange: "<100 mg/dL",
        description: "LDL (bad) cholesterol can build up in your arteries"
      });
    }
    
    if (!baseMetrics.find(m => m.name === "HDL Cholesterol")) {
      baseMetrics.push({
        name: "HDL Cholesterol",
        value: 55,
        unit: "mg/dL",
        status: "normal",
        change: 0,
        referenceRange: ">40 mg/dL (men), >50 mg/dL (women)",
        description: "HDL (good) cholesterol helps remove LDL cholesterol from your arteries"
      });
    }
    
    if (!baseMetrics.find(m => m.name === "Triglycerides")) {
      baseMetrics.push({
        name: "Triglycerides",
        value: 120,
        unit: "mg/dL",
        status: "normal",
        change: 0,
        referenceRange: "<150 mg/dL",
        description: "Triglycerides are a type of fat in the blood"
      });
    }
  }
  
  if (fileNameLower.includes("thyroid") || fileContent.category === 'thyroid') {
    if (!baseMetrics.find(m => m.name === "TSH")) {
      baseMetrics.push({
        name: "TSH",
        value: 2.5,
        unit: "mIU/L",
        status: "normal",
        change: 0,
        referenceRange: "0.4-4.0 mIU/L",
        description: "TSH (Thyroid Stimulating Hormone) regulates thyroid hormone production"
      });
    }
    
    if (!baseMetrics.find(m => m.name === "T4")) {
      baseMetrics.push({
        name: "T4",
        value: 8.5,
        unit: "μg/dL",
        status: "normal",
        change: 0,
        referenceRange: "5.0-12.0 μg/dL",
        description: "T4 (Thyroxine) is the main thyroid hormone in the blood"
      });
    }
    
    if (!baseMetrics.find(m => m.name === "T3")) {
      baseMetrics.push({
        name: "T3",
        value: 120,
        unit: "ng/dL",
        status: "normal",
        change: 0,
        referenceRange: "80-180 ng/dL",
        description: "T3 (Triiodothyronine) is an active thyroid hormone"
      });
    }
  }

  if (fileNameLower.includes("kidney") || fileNameLower.includes("renal") || fileContent.category === 'kidney') {
    if (!baseMetrics.find(m => m.name === "Creatinine")) {
      baseMetrics.push({
        name: "Creatinine",
        value: 0.9,
        unit: "mg/dL",
        status: "normal",
        change: 0,
        referenceRange: "0.6-1.2 mg/dL (men), 0.5-1.1 mg/dL (women)",
        description: "Creatinine is a waste product filtered by the kidneys"
      });
    }
    
    if (!baseMetrics.find(m => m.name === "BUN")) {
      baseMetrics.push({
        name: "BUN",
        value: 15,
        unit: "mg/dL",
        status: "normal",
        change: 0,
        referenceRange: "7-20 mg/dL",
        description: "BUN (Blood Urea Nitrogen) is a waste product filtered by the kidneys"
      });
    }
    
    if (!baseMetrics.find(m => m.name === "eGFR")) {
      baseMetrics.push({
        name: "eGFR",
        value: 95,
        unit: "mL/min/1.73m²",
        status: "normal",
        change: 0,
        referenceRange: ">60 mL/min/1.73m²",
        description: "eGFR estimates how well your kidneys filter blood"
      });
    }
  }
  
  // Always include these common metrics if they don't exist yet
  if (!baseMetrics.find(m => m.name === "Hemoglobin")) {
    baseMetrics.push({
      name: "Hemoglobin",
      value: 14.5,
      unit: "g/dL",
      status: "normal",
      change: 0,
      referenceRange: "13.5-17.5 g/dL (men), 12.0-16.0 g/dL (women)",
      description: "Hemoglobin carries oxygen in red blood cells"
    });
  }
  
  if (!baseMetrics.find(m => m.name === "White Blood Cell Count")) {
    baseMetrics.push({
      name: "White Blood Cell Count",
      value: 7500,
      unit: "cells/μL",
      status: "normal",
      change: 0,
      referenceRange: "4,500-11,000 cells/μL",
      description: "White blood cells help fight infection"
    });
  }
  
  if (!baseMetrics.find(m => m.name === "Platelet Count")) {
    baseMetrics.push({
      name: "Platelet Count",
      value: 250000,
      unit: "platelets/μL",
      status: "normal",
      change: 0,
      referenceRange: "150,000-450,000 platelets/μL",
      description: "Platelets help blood clot"
    });
  }
  
  if (!baseMetrics.find(m => m.name === "Vitamin D")) {
    baseMetrics.push({
      name: "Vitamin D",
      value: 35,
      unit: "ng/mL",
      status: "normal",
      change: 0,
      referenceRange: "20-50 ng/mL",
      description: "Vitamin D is important for bone health and immune function"
    });
  }
  
  // Select appropriate dietary recommendations
  let selectedDietaryRecommendations = [
    "Maintain a balanced diet with plenty of fruits and vegetables",
    "Limit processed foods and added sugars",
    "Stay hydrated by drinking 8-10 glasses of water daily",
    "Include a variety of protein sources in your diet"
  ];
  
  // Call the LLM service with our prepared metrics
  try {
    console.log("Calling LLM service with base metrics:", baseMetrics);
    
    // Use the synchronous version to avoid issues
    const enhancedData = analyzeLLMDataSync({
      reportType: fileNameLower,
      baseMetrics
    });

    console.log("LLM response:", enhancedData);

    if (enhancedData.status === 'success') {
      try {
        // Parse the LLM response
        const parsedContent = JSON.parse(enhancedData.content);
        console.log("Parsed LLM content:", parsedContent);
        
        // Keep original metric values but enhance with LLM insights
        const enhancedMetrics = baseMetrics.map(baseMetric => {
          // Find the corresponding metric from LLM
          const llmMetric = parsedContent.metrics.find((m: any) => 
            m.name === baseMetric.name || m.name.includes(baseMetric.name)
          );
          
          // Merge the base metric with LLM insights, but KEEP the original values
          return {
            ...baseMetric,
            status: llmMetric?.status || baseMetric.status || 'normal',
            description: baseMetric.description || llmMetric?.description || `Information about ${baseMetric.name}`
          };
        });
        
        // Generate analysis results with enhanced metrics
        return {
          metrics: enhancedMetrics,
          summary: {
            text: parsedContent.trends?.description || "Analysis based on your current report data.",
            overallHealth: determineOverallHealth(enhancedMetrics)
          },
          recommendations: {
            title: "Personalized Health Recommendations",
            recommendations: parsedContent.recommendations || []
          },
          dietaryPlan: {
            title: "Personalized Dietary Recommendations",
            recommendations: selectedDietaryRecommendations
          },
          rawData: fileContent
        };
      } catch (parseError) {
        console.error("Error parsing LLM response:", parseError);
      }
    }
  } catch (llmError) {
    console.error("Error with LLM analysis:", llmError);
  }
  
  // Fallback - use original metrics if LLM analysis fails
  console.log("Using fallback analysis with base metrics");
  return {
    metrics: baseMetrics.map(metric => ({
      ...metric,
      unit: metric.unit || '',
    })),
    summary: {
      text: generateSummaryText(fileContent, baseMetrics),
      overallHealth: determineOverallHealth(baseMetrics)
    },
    recommendations: {
      title: "Personalized Health Recommendations",
      recommendations: generateRecommendations(fileContent, baseMetrics)
    },
    dietaryPlan: {
      title: "Personalized Dietary Recommendations",
      recommendations: selectedDietaryRecommendations
    },
    rawData: fileContent
  };
};

// Helper functions to support the main analysis function
function determineOverallHealth(metrics: any[]): string {
  // Count valid (non-undefined) abnormal metrics
  const validMetricsCount = metrics.filter(m => m.value !== undefined).length;
  const abnormalMetricsCount = metrics.filter(m => m.value !== undefined && m.status !== "normal").length;
  
  if (abnormalMetricsCount > validMetricsCount / 2) {
    return "needs attention";
  } else if (abnormalMetricsCount > 0) {
    return "monitor";
  } else {
    return "good";
  }
}

function generateSummaryText(fileContent: any, metrics: any[]): string {
  const validMetricsCount = metrics.filter(m => m.value !== undefined).length;
  const abnormalMetricsCount = metrics.filter(m => m.value !== undefined && m.status !== "normal").length;
  
  return `Based on your ${fileContent.type} report "${fileContent.name}", your overall health appears to be ${determineOverallHealth(metrics)}. ${abnormalMetricsCount} out of ${validMetricsCount} metrics require attention. ${
    abnormalMetricsCount > 0 
      ? `Key areas of concern include ${metrics
          .filter(m => m.value !== undefined && m.status !== "normal")
          .slice(0, 3)
          .map(m => m.name)
          .join(", ")}.` 
      : "All your metrics are within normal ranges."
  }`;
}

function generateRecommendations(fileContent: any, metrics: any[]): string[] {
  // Base recommendations
  let recommendations = [
    "Maintain a balanced diet rich in vegetables and fruits", 
    "Engage in moderate exercise for at least 150 minutes weekly", 
    "Ensure adequate hydration by drinking 8-10 glasses of water daily"
  ];
  
  // Add recommendations based on abnormal metrics
  metrics.forEach(metric => {
    if (metric.status && metric.status !== "normal") {
      if (metric.name === "Blood Glucose" || metric.name === "HbA1c") {
        recommendations.push("Consider consulting with a diabetes specialist about your glucose levels");
      } else if (metric.name.includes("Cholesterol")) {
        recommendations.push("Discuss your cholesterol levels with your healthcare provider");
      } else if (metric.name.includes("Blood Pressure")) {
        recommendations.push("Monitor your blood pressure regularly and consider lifestyle changes");
      } else if (metric.name.includes("TSH") || metric.name.includes("T4") || metric.name.includes("T3")) {
        recommendations.push("Follow up with an endocrinologist about your thyroid function");
      } else if (metric.name.includes("Creatinine") || metric.name.includes("BUN") || metric.name.includes("eGFR")) {
        recommendations.push("Consult with a nephrologist about your kidney function metrics");
      }
    }
  });
  
  // Add a file-specific recommendation
  if (fileContent.type.includes('pdf')) {
    recommendations.push("Your PDF results show important health indicators - discuss specific findings with your doctor");
  } else if (fileContent.type.includes('document') || fileContent.type.includes('doc')) {
    recommendations.push("Your lab document contains detailed health parameters - schedule a review with your healthcare provider");
  } else if (fileContent.type.includes('image')) {
    recommendations.push("For more accurate analysis, consider providing digital copies of your lab reports");
  }
  
  // Remove duplicates
  return [...new Set(recommendations)];
}
