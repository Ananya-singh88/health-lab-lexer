from fastapi import FastAPI, HTTPException, Body, UploadFile, File, Form
from fastapi.middleware.cors import CORSMiddleware
import httpx
import json
import io
import os
import tempfile
import re
from typing import Dict, Any, Optional, List
import uvicorn
import PyPDF2
from pydantic import BaseModel

app = FastAPI(title="Medical Report Analysis API")

# Configure CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # In production, replace with specific origins
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Anthropic API configuration
ANTHROPIC_API_KEY = "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"
ANTHROPIC_API_URL = "https://api.anthropic.com/v1/messages"

# Common medical test patterns for extraction
MEDICAL_PATTERNS = {
    "glucose": r"(?:glucose|blood\s+sugar)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(mg/dL|mmol/L)?",
    "cholesterol": r"(?:total\s+cholesterol|cholesterol)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(mg/dL|mmol/L)?",
    "hdl": r"(?:hdl|hdl-c|high\s+density\s+lipoprotein)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(mg/dL|mmol/L)?",
    "ldl": r"(?:ldl|ldl-c|low\s+density\s+lipoprotein)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(mg/dL|mmol/L)?",
    "triglycerides": r"(?:triglycerides|tg)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(mg/dL|mmol/L)?",
    "a1c": r"(?:a1c|hba1c|glycated\s+hemoglobin)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(%|mmol/mol)?",
    "blood_pressure": r"(?:blood\s+pressure|bp)\s*[:-]?\s*(\d+)\s*[/]\s*(\d+)\s*(mmHg)?",
    "heart_rate": r"(?:heart\s+rate|pulse)\s*[:-]?\s*(\d+)\s*(bpm)?",
    "weight": r"(?:weight|wt)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(kg|lbs)?",
    "height": r"(?:height|ht)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(cm|m|ft|in)?",
    "bmi": r"(?:bmi|body\s+mass\s+index)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(kg/m2)?",
    "creatinine": r"(?:creatinine|cr)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(mg/dL|μmol/L)?",
    "egfr": r"(?:egfr|estimated\s+glomerular\s+filtration\s+rate)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(mL/min/1.73m2)?",
    "tsh": r"(?:tsh|thyroid\s+stimulating\s+hormone)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(mIU/L|μIU/mL)?",
    "vitamin_d": r"(?:vitamin\s+d|25-oh\s+vitamin\s+d)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(ng/mL|nmol/L)?",
    "iron": r"(?:iron|fe)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(μg/dL|μmol/L)?",
    "ferritin": r"(?:ferritin)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(ng/mL|μg/L)?",
    "wbc": r"(?:wbc|white\s+blood\s+cells|leukocytes)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(×10\^9/L|×10\^3/μL)?",
    "rbc": r"(?:rbc|red\s+blood\s+cells|erythrocytes)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(×10\^12/L|×10\^6/μL)?",
    "hemoglobin": r"(?:hemoglobin|hgb|hb)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(g/dL|g/L)?",
    "hematocrit": r"(?:hematocrit|hct)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(%|L/L)?",
    "platelets": r"(?:platelets|plt)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(×10\^9/L|×10\^3/μL)?",
    "sodium": r"(?:sodium|na)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(mmol/L|mEq/L)?",
    "potassium": r"(?:potassium|k)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(mmol/L|mEq/L)?",
    "chloride": r"(?:chloride|cl)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(mmol/L|mEq/L)?",
    "calcium": r"(?:calcium|ca)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(mg/dL|mmol/L)?",
    "magnesium": r"(?:magnesium|mg)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(mg/dL|mmol/L)?",
    "phosphorus": r"(?:phosphorus|p)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(mg/dL|mmol/L)?",
    "uric_acid": r"(?:uric\s+acid)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(mg/dL|μmol/L)?",
    "alt": r"(?:alt|alanine\s+aminotransferase|sgpt)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(U/L|IU/L)?",
    "ast": r"(?:ast|aspartate\s+aminotransferase|sgot)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(U/L|IU/L)?",
    "alp": r"(?:alp|alkaline\s+phosphatase)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(U/L|IU/L)?",
    "ggt": r"(?:ggt|gamma-glutamyl\s+transferase)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(U/L|IU/L)?",
    "bilirubin": r"(?:total\s+bilirubin|bilirubin)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(mg/dL|μmol/L)?",
    "protein": r"(?:total\s+protein|protein)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(g/dL|g/L)?",
    "albumin": r"(?:albumin|alb)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(g/dL|g/L)?",
    "globulin": r"(?:globulin|glob)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(g/dL|g/L)?",
    "psa": r"(?:psa|prostate\s+specific\s+antigen)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(ng/mL|μg/L)?",
    "cea": r"(?:cea|carcinoembryonic\s+antigen)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(ng/mL|μg/L)?",
    "afp": r"(?:afp|alpha-fetoprotein)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(ng/mL|μg/L)?",
    "ca125": r"(?:ca125|ca-125|cancer\s+antigen\s+125)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(U/mL|kU/L)?",
    "ca19_9": r"(?:ca19-9|ca19_9|cancer\s+antigen\s+19-9)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(U/mL|kU/L)?",
    "hcg": r"(?:hcg|human\s+chorionic\s+gonadotropin)\s*[:-]?\s*(\d+(?:\.\d+)?)\s*(mIU/mL|IU/L)?",
}

# Reference ranges for common medical tests
REFERENCE_RANGES = {
    "glucose": {"min": 70, "max": 99, "unit": "mg/dL"},
    "cholesterol": {"min": 125, "max": 200, "unit": "mg/dL"},
    "hdl": {"min": 40, "max": 60, "unit": "mg/dL"},
    "ldl": {"min": 0, "max": 100, "unit": "mg/dL"},
    "triglycerides": {"min": 0, "max": 150, "unit": "mg/dL"},
    "a1c": {"min": 4.0, "max": 5.6, "unit": "%"},
    "blood_pressure_systolic": {"min": 90, "max": 120, "unit": "mmHg"},
    "blood_pressure_diastolic": {"min": 60, "max": 80, "unit": "mmHg"},
    "heart_rate": {"min": 60, "max": 100, "unit": "bpm"},
    "bmi": {"min": 18.5, "max": 24.9, "unit": "kg/m2"},
    "creatinine_male": {"min": 0.74, "max": 1.35, "unit": "mg/dL"},
    "creatinine_female": {"min": 0.59, "max": 1.04, "unit": "mg/dL"},
    "egfr": {"min": 90, "max": 120, "unit": "mL/min/1.73m2"},
    "tsh": {"min": 0.4, "max": 4.0, "unit": "mIU/L"},
    "vitamin_d": {"min": 30, "max": 100, "unit": "ng/mL"},
    "iron": {"min": 65, "max": 175, "unit": "μg/dL"},
    "ferritin_male": {"min": 30, "max": 400, "unit": "ng/mL"},
    "ferritin_female": {"min": 15, "max": 150, "unit": "ng/mL"},
    "wbc": {"min": 4.5, "max": 11.0, "unit": "×10^9/L"},
    "rbc_male": {"min": 4.7, "max": 6.1, "unit": "×10^12/L"},
    "rbc_female": {"min": 4.2, "max": 5.4, "unit": "×10^12/L"},
    "hemoglobin_male": {"min": 13.5, "max": 17.5, "unit": "g/dL"},
    "hemoglobin_female": {"min": 12.0, "max": 15.5, "unit": "g/dL"},
    "hematocrit_male": {"min": 41, "max": 50, "unit": "%"},
    "hematocrit_female": {"min": 36, "max": 44, "unit": "%"},
    "platelets": {"min": 150, "max": 450, "unit": "×10^9/L"},
    "sodium": {"min": 135, "max": 145, "unit": "mmol/L"},
    "potassium": {"min": 3.5, "max": 5.0, "unit": "mmol/L"},
    "chloride": {"min": 98, "max": 107, "unit": "mmol/L"},
    "calcium": {"min": 8.5, "max": 10.5, "unit": "mg/dL"},
    "magnesium": {"min": 1.7, "max": 2.2, "unit": "mg/dL"},
    "phosphorus": {"min": 2.5, "max": 4.5, "unit": "mg/dL"},
    "uric_acid_male": {"min": 3.4, "max": 7.0, "unit": "mg/dL"},
    "uric_acid_female": {"min": 2.4, "max": 6.0, "unit": "mg/dL"},
    "alt": {"min": 7, "max": 55, "unit": "U/L"},
    "ast": {"min": 8, "max": 48, "unit": "U/L"},
    "alp": {"min": 40, "max": 129, "unit": "U/L"},
    "ggt": {"min": 8, "max": 61, "unit": "U/L"},
    "bilirubin": {"min": 0.1, "max": 1.2, "unit": "mg/dL"},
    "protein": {"min": 6.0, "max": 8.3, "unit": "g/dL"},
    "albumin": {"min": 3.5, "max": 5.0, "unit": "g/dL"},
    "globulin": {"min": 2.0, "max": 3.5, "unit": "g/dL"},
    "psa_male": {"min": 0, "max": 4.0, "unit": "ng/mL"}
}

@app.get("/")
async def root():
    return {"message": "Medical Report Analysis API is running"}


def extract_text_from_pdf(pdf_file) -> str:
    """
    Extract text from a PDF file using PyPDF2
    
    Args:
        pdf_file: The PDF file object
        
    Returns:
        str: The extracted text from the PDF
    """
    try:
        # Create a PDF reader object
        pdf_reader = PyPDF2.PdfReader(pdf_file)
        
        # Extract text from each page
        text = ""
        for page_num in range(len(pdf_reader.pages)):
            page = pdf_reader.pages[page_num]
            text += page.extract_text() + "\n\n"
            
        return text
    except Exception as e:
        print(f"Error extracting text from PDF: {str(e)}")
        return ""


def extract_medical_data(text: str) -> Dict[str, Any]:
    """
    Extract medical data from text using regex patterns
    
    Args:
        text: The text to extract data from
        
    Returns:
        Dict: The extracted medical data
    """
    extracted_data = {}
    metrics = []
    
    # Convert text to lowercase for case-insensitive matching
    text_lower = text.lower()
    
    # Extract metrics using regex patterns
    for metric_name, pattern in MEDICAL_PATTERNS.items():
        matches = re.findall(pattern, text_lower)
        
        if matches:
            # Handle special case for blood pressure which has two values
            if metric_name == "blood_pressure" and len(matches[0]) >= 2:
                systolic, diastolic = matches[0][0], matches[0][1]
                unit = matches[0][2] if len(matches[0]) > 2 and matches[0][2] else "mmHg"
                
                # Add systolic blood pressure
                systolic_value = float(systolic)
                systolic_status = "normal"
                if systolic_value < REFERENCE_RANGES["blood_pressure_systolic"]["min"]:
                    systolic_status = "caution"
                elif systolic_value > REFERENCE_RANGES["blood_pressure_systolic"]["max"]:
                    systolic_status = "attention"
                    
                metrics.append({
                    "name": "Blood Pressure (Systolic)",
                    "value": systolic_value,
                    "unit": unit,
                    "status": systolic_status,
                    "referenceRange": f"{REFERENCE_RANGES['blood_pressure_systolic']['min']}-{REFERENCE_RANGES['blood_pressure_systolic']['max']} {unit}"
                })
                
                # Add diastolic blood pressure
                diastolic_value = float(diastolic)
                diastolic_status = "normal"
                if diastolic_value < REFERENCE_RANGES["blood_pressure_diastolic"]["min"]:
                    diastolic_status = "caution"
                elif diastolic_value > REFERENCE_RANGES["blood_pressure_diastolic"]["max"]:
                    diastolic_status = "attention"
                    
                metrics.append({
                    "name": "Blood Pressure (Diastolic)",
                    "value": diastolic_value,
                    "unit": unit,
                    "status": diastolic_status,
                    "referenceRange": f"{REFERENCE_RANGES['blood_pressure_diastolic']['min']}-{REFERENCE_RANGES['blood_pressure_diastolic']['max']} {unit}"
                })
            else:
                # Handle regular metrics with single values
                value = float(matches[0][0])
                unit = matches[0][1] if len(matches[0]) > 1 and matches[0][1] else ""
                
                # Get reference range and determine status
                reference_key = metric_name
                status = "normal"
                reference_range = ""
                
                # Handle gender-specific reference ranges
                if f"{metric_name}_male" in REFERENCE_RANGES:
                    # For simplicity, we'll use the male reference range as default
                    # In a real app, you would determine the gender from the report or user profile
                    reference_key = f"{metric_name}_male"
                
                if reference_key in REFERENCE_RANGES:
                    ref_range = REFERENCE_RANGES[reference_key]
                    reference_range = f"{ref_range['min']}-{ref_range['max']} {ref_range['unit']}"
                    
                    # Set unit from reference range if not found in the text
                    if not unit and 'unit' in ref_range:
                        unit = ref_range['unit']
                    
                    # Determine status based on reference range
                    if value < ref_range["min"]:
                        status = "caution"
                    elif value > ref_range["max"]:
                        status = "attention"
                
                # Format the metric name for display
                display_name = " ".join(word.capitalize() for word in metric_name.replace("_", " ").split())
                
                metrics.append({
                    "name": display_name,
                    "value": value,
                    "unit": unit,
                    "status": status,
                    "referenceRange": reference_range
                })
    
    # Determine the report category based on the metrics found
    category = "general"
    if any(m["name"].lower() in ["glucose", "a1c"] for m in metrics):
        category = "diabetes"
    elif any(m["name"].lower() in ["cholesterol", "hdl", "ldl", "triglycerides"] for m in metrics):
        category = "lipid"
    elif any(m["name"].lower() in ["hemoglobin", "hematocrit", "wbc", "rbc", "platelets"] for m in metrics):
        category = "cbc"
    elif any(m["name"].lower() in ["alt", "ast", "alp", "bilirubin"] for m in metrics):
        category = "liver"
    elif any(m["name"].lower() in ["creatinine", "egfr", "bun"] for m in metrics):
        category = "kidney"
    
    extracted_data = {
        "metrics": metrics,
        "category": category,
        "text": text
    }
    
    return extracted_data


@app.post("/upload-pdf")
async def upload_pdf(file: UploadFile = File(...)):
    """
    Upload and process a PDF medical report
    
    Args:
        file: The uploaded PDF file
        
    Returns:
        Dict: The extracted medical data and analysis
    """
    try:
        # Validate file type
        if not file.filename.lower().endswith(".pdf"):
            raise HTTPException(status_code=400, detail="Only PDF files are supported")
        
        # Read the file content
        contents = await file.read()
        
        # Create a file-like object from the content
        pdf_file = io.BytesIO(contents)
        
        # Extract text from the PDF
        text = extract_text_from_pdf(pdf_file)
        
        if not text:
            return {"error": "Could not extract text from the PDF", "extracted_data": {"metrics": [], "category": "general", "text": ""}}
        
        # Extract medical data from the text
        extracted_data = extract_medical_data(text)
        
        # If no metrics were found, try to use Claude to extract them
        if not extracted_data["metrics"]:
            # Prepare the prompt for Claude
            prompt = f"""Extract medical test results from this lab report text. For each test, provide the name, value, and unit if available.
            
            TEXT FROM MEDICAL REPORT:
            {text}
            
            Return ONLY a JSON object with this structure:
            {{
              "metrics": [
                {{
                  "name": "Test Name",
                  "value": numeric_value,
                  "unit": "unit of measurement"
                }},
                ...
              ]
            }}
            
            IMPORTANT:
            1. Only include tests with clear numeric values
            2. Convert all values to numbers (remove any text from the value field)
            3. Include the unit if present
            4. Do not make up or infer any values not explicitly stated
            5. Focus on common tests like glucose, cholesterol, blood pressure, etc.
            """
            
            # Call the Anthropic API
            headers = {
                "x-api-key": ANTHROPIC_API_KEY,
                "Content-Type": "application/json",
                "anthropic-version": "2023-06-01"
            }
            
            payload = {
                "model": "claude-3-haiku-20240307",
                "max_tokens": 1500,
                "temperature": 0.2,
                "messages": [{"role": "user", "content": prompt}]
            }
            
            async with httpx.AsyncClient() as client:
                response = await client.post(ANTHROPIC_API_URL, json=payload, headers=headers)
                
            if response.status_code == 200:
                response_data = response.json()
                content = response_data.get("content", [])
                
                if content and len(content) > 0:
                    text_content = content[0].get("text", "{}")
                    
                    try:
                        claude_data = json.loads(text_content)
                        if "metrics" in claude_data and claude_data["metrics"]:
                            # Process the metrics to add status and reference ranges
                            processed_metrics = []
                            for metric in claude_data["metrics"]:
                                name = metric.get("name", "").lower()
                                value = metric.get("value")
                                unit = metric.get("unit", "")
                                
                                # Skip metrics without values
                                if value is None:
                                    continue
                                    
                                # Try to match the metric name to our reference ranges
                                status = "normal"
                                reference_range = ""
                                
                                # Find the closest matching reference key
                                matching_key = None
                                for ref_key in REFERENCE_RANGES.keys():
                                    # Remove gender suffixes for comparison
                                    base_key = ref_key.split("_")[0] if "_male" in ref_key or "_female" in ref_key else ref_key
                                    if base_key in name:
                                        matching_key = ref_key
                                        break
                                
                                if matching_key:
                                    ref_range = REFERENCE_RANGES[matching_key]
                                    reference_range = f"{ref_range['min']}-{ref_range['max']} {ref_range['unit']}"
                                    
                                    # Set unit from reference range if not found
                                    if not unit and 'unit' in ref_range:
                                        unit = ref_range['unit']
                                    
                                    # Determine status based on reference range
                                    if float(value) < ref_range["min"]:
                                        status = "caution"
                                    elif float(value) > ref_range["max"]:
                                        status = "attention"
                                
                                # Format the metric name for display
                                display_name = metric.get("name")
                                
                                processed_metrics.append({
                                    "name": display_name,
                                    "value": float(value),
                                    "unit": unit,
                                    "status": status,
                                    "referenceRange": reference_range
                                })
                            
                            extracted_data["metrics"] = processed_metrics
                    except json.JSONDecodeError:
                        print("Failed to parse Claude's response as JSON")
        
        return {"extracted_data": extracted_data}
        
    except Exception as e: "max": 5.0, "unit": "mmol/L"},
    "chloride": {"min": 98, "max": 107, "unit": "mmol/L"},
    "calcium": {"min": 8.5, "max": 10.5, "unit": "mg/dL"},
    "magnesium": {"min": 1.7, "max": 2.2, "unit": "mg/dL"},
    "phosphorus": {"min": 2.5, "max": 4.5, "unit": "mg/dL"},
    "uric_acid_male": {"min": 3.4, "max": 7.0, "unit": "mg/dL"},
    "uric_acid_female": {"min": 2.4, "max": 6.0, "unit": "mg/dL"},
    "alt": {"min": 7, "max": 55, "unit": "U/L"},
    "ast": {"min": 8, "max": 48, "unit": "U/L"},
    "alp": {"min": 40, "max": 129, "unit": "U/L"},
    "ggt": {"min": 8, "max": 61, "unit": "U/L"},
    "bilirubin": {"min": 0.1, "max": 1.2, "unit": "mg/dL"},
    "protein": {"min": 6.0, "max": 8.3, "unit": "g/dL"},
    "albumin": {"min": 3.5, "max": 5.0, "unit": "g/dL"},
    "globulin": {"min": 2.0, "max": 3.5, "unit": "g/dL"},
    "psa_male": {"min": 0, "max": 4.0, "unit": "ng/mL"}
}